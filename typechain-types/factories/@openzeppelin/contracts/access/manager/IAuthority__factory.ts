/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAuthority,
  IAuthorityInterface,
} from "../../../../../@openzeppelin/contracts/access/manager/IAuthority";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "canCall",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAuthority__factory {
  static readonly abi = _abi;
  static createInterface(): IAuthorityInterface {
    return new Interface(_abi) as IAuthorityInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IAuthority {
    return new Contract(address, _abi, runner) as unknown as IAuthority;
  }
}
