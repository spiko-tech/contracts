/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RedemptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DELAY"
      | "UPGRADE_INTERFACE_VERSION"
      | "authority"
      | "cancelRedemption"
      | "details"
      | "executeRedemption"
      | "hashRedemptionId"
      | "minimum"
      | "multicall"
      | "onTransferReceived"
      | "outputsFor"
      | "proxiableUUID"
      | "registerOutput"
      | "setMinimum"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EnableOutput"
      | "Initialized"
      | "MinimumUpdated"
      | "RedemptionCanceled"
      | "RedemptionExecuted"
      | "RedemptionInitiated"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelRedemption",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "details", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "executeRedemption",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashRedemptionId",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferReceived",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "outputsFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOutput",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimum",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "details", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashRedemptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minimum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTransferReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "outputsFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinimum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace EnableOutputEvent {
  export type InputTuple = [
    input: AddressLike,
    output: AddressLike,
    enable: boolean
  ];
  export type OutputTuple = [input: string, output: string, enable: boolean];
  export interface OutputObject {
    input: string;
    output: string;
    enable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumUpdatedEvent {
  export type InputTuple = [input: AddressLike, amount: BigNumberish];
  export type OutputTuple = [input: string, amount: bigint];
  export interface OutputObject {
    input: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionCanceledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionExecutedEvent {
  export type InputTuple = [id: BytesLike, data: BytesLike];
  export type OutputTuple = [id: string, data: string];
  export interface OutputObject {
    id: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionInitiatedEvent {
  export type InputTuple = [
    id: BytesLike,
    user: AddressLike,
    input: AddressLike,
    output: AddressLike,
    inputValue: BigNumberish,
    salt: BytesLike
  ];
  export type OutputTuple = [
    id: string,
    user: string,
    input: string,
    output: string,
    inputValue: bigint,
    salt: string
  ];
  export interface OutputObject {
    id: string;
    user: string;
    input: string;
    output: string;
    inputValue: bigint;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Redemption extends BaseContract {
  connect(runner?: ContractRunner | null): Redemption;
  waitForDeployment(): Promise<this>;

  interface: RedemptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DELAY: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  authority: TypedContractMethod<[], [string], "view">;

  cancelRedemption: TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  details: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { status: bigint; deadline: bigint }],
    "view"
  >;

  executeRedemption: TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  hashRedemptionId: TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "view"
  >;

  minimum: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  onTransferReceived: TypedContractMethod<
    [
      user: AddressLike,
      arg1: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  outputsFor: TypedContractMethod<[input: AddressLike], [string[]], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerOutput: TypedContractMethod<
    [input: AddressLike, output: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;

  setMinimum: TypedContractMethod<
    [input: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelRedemption"
  ): TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "details"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { status: bigint; deadline: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRedemption"
  ): TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hashRedemptionId"
  ): TypedContractMethod<
    [
      user: AddressLike,
      input: AddressLike,
      output: AddressLike,
      inputValue: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimum"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "onTransferReceived"
  ): TypedContractMethod<
    [
      user: AddressLike,
      arg1: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "outputsFor"
  ): TypedContractMethod<[input: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerOutput"
  ): TypedContractMethod<
    [input: AddressLike, output: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimum"
  ): TypedContractMethod<
    [input: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "EnableOutput"
  ): TypedContractEvent<
    EnableOutputEvent.InputTuple,
    EnableOutputEvent.OutputTuple,
    EnableOutputEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumUpdated"
  ): TypedContractEvent<
    MinimumUpdatedEvent.InputTuple,
    MinimumUpdatedEvent.OutputTuple,
    MinimumUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionCanceled"
  ): TypedContractEvent<
    RedemptionCanceledEvent.InputTuple,
    RedemptionCanceledEvent.OutputTuple,
    RedemptionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionExecuted"
  ): TypedContractEvent<
    RedemptionExecutedEvent.InputTuple,
    RedemptionExecutedEvent.OutputTuple,
    RedemptionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionInitiated"
  ): TypedContractEvent<
    RedemptionInitiatedEvent.InputTuple,
    RedemptionInitiatedEvent.OutputTuple,
    RedemptionInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "EnableOutput(address,address,bool)": TypedContractEvent<
      EnableOutputEvent.InputTuple,
      EnableOutputEvent.OutputTuple,
      EnableOutputEvent.OutputObject
    >;
    EnableOutput: TypedContractEvent<
      EnableOutputEvent.InputTuple,
      EnableOutputEvent.OutputTuple,
      EnableOutputEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MinimumUpdated(address,uint256)": TypedContractEvent<
      MinimumUpdatedEvent.InputTuple,
      MinimumUpdatedEvent.OutputTuple,
      MinimumUpdatedEvent.OutputObject
    >;
    MinimumUpdated: TypedContractEvent<
      MinimumUpdatedEvent.InputTuple,
      MinimumUpdatedEvent.OutputTuple,
      MinimumUpdatedEvent.OutputObject
    >;

    "RedemptionCanceled(bytes32)": TypedContractEvent<
      RedemptionCanceledEvent.InputTuple,
      RedemptionCanceledEvent.OutputTuple,
      RedemptionCanceledEvent.OutputObject
    >;
    RedemptionCanceled: TypedContractEvent<
      RedemptionCanceledEvent.InputTuple,
      RedemptionCanceledEvent.OutputTuple,
      RedemptionCanceledEvent.OutputObject
    >;

    "RedemptionExecuted(bytes32,bytes)": TypedContractEvent<
      RedemptionExecutedEvent.InputTuple,
      RedemptionExecutedEvent.OutputTuple,
      RedemptionExecutedEvent.OutputObject
    >;
    RedemptionExecuted: TypedContractEvent<
      RedemptionExecutedEvent.InputTuple,
      RedemptionExecutedEvent.OutputTuple,
      RedemptionExecutedEvent.OutputObject
    >;

    "RedemptionInitiated(bytes32,address,address,address,uint256,bytes32)": TypedContractEvent<
      RedemptionInitiatedEvent.InputTuple,
      RedemptionInitiatedEvent.OutputTuple,
      RedemptionInitiatedEvent.OutputObject
    >;
    RedemptionInitiated: TypedContractEvent<
      RedemptionInitiatedEvent.InputTuple,
      RedemptionInitiatedEvent.OutputTuple,
      RedemptionInitiatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
