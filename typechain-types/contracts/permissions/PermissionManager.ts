/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PermissionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN"
      | "ADMIN_MASK"
      | "PUBLIC"
      | "PUBLIC_MASK"
      | "UPGRADE_INTERFACE_VERSION"
      | "addGroup"
      | "canCall"
      | "getGroupAdmins"
      | "getGroups"
      | "getRequirements"
      | "initialize"
      | "multicall"
      | "proxiableUUID"
      | "remGroup"
      | "setGroupAdmins"
      | "setRequirements"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GroupAdded"
      | "GroupAdmins"
      | "GroupRemoved"
      | "Initialized"
      | "Requirements"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ADMIN_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PUBLIC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PUBLIC_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addGroup",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupAdmins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroups",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequirements",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remGroup",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupAdmins",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequirements",
    values: [AddressLike, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ADMIN_MASK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PUBLIC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PUBLIC_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGroup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGroupAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace GroupAddedEvent {
  export type InputTuple = [user: AddressLike, group: BigNumberish];
  export type OutputTuple = [user: string, group: bigint];
  export interface OutputObject {
    user: string;
    group: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GroupAdminsEvent {
  export type InputTuple = [group: BigNumberish, admins: BytesLike];
  export type OutputTuple = [group: bigint, admins: string];
  export interface OutputObject {
    group: bigint;
    admins: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GroupRemovedEvent {
  export type InputTuple = [user: AddressLike, group: BigNumberish];
  export type OutputTuple = [user: string, group: bigint];
  export interface OutputObject {
    user: string;
    group: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequirementsEvent {
  export type InputTuple = [
    target: AddressLike,
    selector: BytesLike,
    groups: BytesLike
  ];
  export type OutputTuple = [target: string, selector: string, groups: string];
  export interface OutputObject {
    target: string;
    selector: string;
    groups: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PermissionManager extends BaseContract {
  connect(runner?: ContractRunner | null): PermissionManager;
  waitForDeployment(): Promise<this>;

  interface: PermissionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN: TypedContractMethod<[], [bigint], "view">;

  ADMIN_MASK: TypedContractMethod<[], [string], "view">;

  PUBLIC: TypedContractMethod<[], [bigint], "view">;

  PUBLIC_MASK: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addGroup: TypedContractMethod<
    [user: AddressLike, group: BigNumberish],
    [void],
    "nonpayable"
  >;

  canCall: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, selector: BytesLike],
    [boolean],
    "view"
  >;

  getGroupAdmins: TypedContractMethod<[group: BigNumberish], [string], "view">;

  getGroups: TypedContractMethod<[user: AddressLike], [string], "view">;

  getRequirements: TypedContractMethod<
    [target: AddressLike, selector: BytesLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  remGroup: TypedContractMethod<
    [user: AddressLike, group: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGroupAdmins: TypedContractMethod<
    [group: BigNumberish, admins: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setRequirements: TypedContractMethod<
    [target: AddressLike, selectors: BytesLike[], groups: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ADMIN_MASK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PUBLIC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PUBLIC_MASK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addGroup"
  ): TypedContractMethod<
    [user: AddressLike, group: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canCall"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, selector: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGroupAdmins"
  ): TypedContractMethod<[group: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGroups"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRequirements"
  ): TypedContractMethod<
    [target: AddressLike, selector: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remGroup"
  ): TypedContractMethod<
    [user: AddressLike, group: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGroupAdmins"
  ): TypedContractMethod<
    [group: BigNumberish, admins: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRequirements"
  ): TypedContractMethod<
    [target: AddressLike, selectors: BytesLike[], groups: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "GroupAdded"
  ): TypedContractEvent<
    GroupAddedEvent.InputTuple,
    GroupAddedEvent.OutputTuple,
    GroupAddedEvent.OutputObject
  >;
  getEvent(
    key: "GroupAdmins"
  ): TypedContractEvent<
    GroupAdminsEvent.InputTuple,
    GroupAdminsEvent.OutputTuple,
    GroupAdminsEvent.OutputObject
  >;
  getEvent(
    key: "GroupRemoved"
  ): TypedContractEvent<
    GroupRemovedEvent.InputTuple,
    GroupRemovedEvent.OutputTuple,
    GroupRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Requirements"
  ): TypedContractEvent<
    RequirementsEvent.InputTuple,
    RequirementsEvent.OutputTuple,
    RequirementsEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "GroupAdded(address,uint8)": TypedContractEvent<
      GroupAddedEvent.InputTuple,
      GroupAddedEvent.OutputTuple,
      GroupAddedEvent.OutputObject
    >;
    GroupAdded: TypedContractEvent<
      GroupAddedEvent.InputTuple,
      GroupAddedEvent.OutputTuple,
      GroupAddedEvent.OutputObject
    >;

    "GroupAdmins(uint8,bytes32)": TypedContractEvent<
      GroupAdminsEvent.InputTuple,
      GroupAdminsEvent.OutputTuple,
      GroupAdminsEvent.OutputObject
    >;
    GroupAdmins: TypedContractEvent<
      GroupAdminsEvent.InputTuple,
      GroupAdminsEvent.OutputTuple,
      GroupAdminsEvent.OutputObject
    >;

    "GroupRemoved(address,uint8)": TypedContractEvent<
      GroupRemovedEvent.InputTuple,
      GroupRemovedEvent.OutputTuple,
      GroupRemovedEvent.OutputObject
    >;
    GroupRemoved: TypedContractEvent<
      GroupRemovedEvent.InputTuple,
      GroupRemovedEvent.OutputTuple,
      GroupRemovedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Requirements(address,bytes4,bytes32)": TypedContractEvent<
      RequirementsEvent.InputTuple,
      RequirementsEvent.OutputTuple,
      RequirementsEvent.OutputObject
    >;
    Requirements: TypedContractEvent<
      RequirementsEvent.InputTuple,
      RequirementsEvent.OutputTuple,
      RequirementsEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
