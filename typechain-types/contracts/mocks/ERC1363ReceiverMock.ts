/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ERC1363ReceiverMockInterface extends Interface {
  getFunction(
    nameOrSignature: "onApprovalReceived" | "onTransferReceived"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ApprovalReceived" | "TransferReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "onApprovalReceived",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferReceived",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "onApprovalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTransferReceived",
    data: BytesLike
  ): Result;
}

export namespace ApprovalReceivedEvent {
  export type InputTuple = [
    owner: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [owner: string, value: bigint, data: string];
  export interface OutputObject {
    owner: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferReceivedEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC1363ReceiverMock extends BaseContract {
  connect(runner?: ContractRunner | null): ERC1363ReceiverMock;
  waitForDeployment(): Promise<this>;

  interface: ERC1363ReceiverMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onApprovalReceived: TypedContractMethod<
    [owner: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;

  onTransferReceived: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onApprovalReceived"
  ): TypedContractMethod<
    [owner: AddressLike, value: BigNumberish, data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onTransferReceived"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ApprovalReceived"
  ): TypedContractEvent<
    ApprovalReceivedEvent.InputTuple,
    ApprovalReceivedEvent.OutputTuple,
    ApprovalReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TransferReceived"
  ): TypedContractEvent<
    TransferReceivedEvent.InputTuple,
    TransferReceivedEvent.OutputTuple,
    TransferReceivedEvent.OutputObject
  >;

  filters: {
    "ApprovalReceived(address,uint256,bytes)": TypedContractEvent<
      ApprovalReceivedEvent.InputTuple,
      ApprovalReceivedEvent.OutputTuple,
      ApprovalReceivedEvent.OutputObject
    >;
    ApprovalReceived: TypedContractEvent<
      ApprovalReceivedEvent.InputTuple,
      ApprovalReceivedEvent.OutputTuple,
      ApprovalReceivedEvent.OutputObject
    >;

    "TransferReceived(address,address,uint256,bytes)": TypedContractEvent<
      TransferReceivedEvent.InputTuple,
      TransferReceivedEvent.OutputTuple,
      TransferReceivedEvent.OutputObject
    >;
    TransferReceived: TypedContractEvent<
      TransferReceivedEvent.InputTuple,
      TransferReceivedEvent.OutputTuple,
      TransferReceivedEvent.OutputObject
    >;
  };
}
